/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 450

// This shader computes a glossy IBL map to be used with the Unreal 4 PBR shading model as
// described in
//
// "Real Shading in Unreal Engine 4" by Brian Karis
// http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
//
// As an extension to the original it uses multiple importance sampling weighted BRDF importance
// sampling and environment map importance sampling to yield good results for high dynamic range
// lighting.

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable

#include "host_device.h"

// clang-format off
layout(local_size_x = GRID_SIZE, local_size_y = GRID_SIZE, local_size_z = 1) in;


layout(set = 0, binding = 0) writeonly uniform image2D gOutColor;
layout(set = 1, binding = eImpSamples,  scalar)	buffer _EnvAccel { EnvAccel envSamplingData[]; };
layout(set = 1, binding = eHdr) uniform sampler2D hdrTexture;

layout(push_constant) uniform HdrPushBlock_  { HdrPushBlock pc; };
// clang-format on

const float M_PI        = 3.14159265358979323846;   // pi
const float M_TWO_PI    = 6.28318530717958648;      // 2*pi
const float M_PI_2      = 1.57079632679489661923;   // pi/2
const float M_PI_4      = 0.785398163397448309616;  // pi/4
const float M_1_OVER_PI = 0.318309886183790671538;  // 1/pi
const float M_2_OVER_PI = 0.636619772367581343076;  // 2/pi

#include "hdr_env_sampling.glsl"

//layout(push_constant) uniform PushConsts
//{
//  layout(offset = 0) mat4   mvp;
//  layout(offset = 64) float roughness;
//  layout(offset = 68) uint  numSamples;
//}
//consts;


const float PI          = 3.14159265359;
const float ONE_OVER_PI = 0.3183099;

vec2 get_spherical_uv(vec3 v)
{
  float gamma = asin(v.y);
  float theta = atan(v.z, v.x);

  return vec2(theta * ONE_OVER_PI * 0.5, gamma * ONE_OVER_PI) + 0.5;
}

// Importance sample a GGX microfacet distribution.
vec3 ggx_sample(vec2 xi, float alpha)
{
  float phi       = 2.0 * PI * xi.x;
  float cos_theta = sqrt((1.0 - xi.y) / (1.0 + (alpha * alpha - 1.0) * xi.y));
  float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

  return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
}

// Evaluate a GGX microfacet distribution.
float ggx_eval(float alpha, float nh)
{
  float a2   = alpha * alpha;
  float nh2  = nh * nh;
  float tan2 = (1.0f - nh2) / nh2;
  float f    = a2 + tan2;
  return a2 / (f * f * PI * nh2 * nh);
}

// Simple pseudo-random numbers.
uint rnd_next(uint state)
{
  // xorshift32
  state ^= state << 13;
  state ^= state >> 17;
  state ^= state << 5;
  return state;
}
float rnd_val(uint state)
{

  return float(state) * 2.3283064365386963e-10;
}
int hash(int seed, int i)
{
  return (i ^ seed) * 1075385539;
}
int rnd_init(ivec3 pos)
{
  return hash(hash(hash(0, pos.x), pos.y), pos.z);
}

struct Envmap_sample_value
{
  vec3  dir;
  vec3  value;
  float pdf;
};


void main()
{
  const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(pc.size);
  const vec2 d           = inUV * 2.0 - 1.0;
  vec3       direction   = vec3(pc.mvp * vec4(d.x, d.y, 1.0, 1.0));

  vec3 normal = normalize(direction.xyz);
  vec3 tangent = normalize(abs(normal.x) > abs(normal.z) ? vec3(-normal.y, normal.x, 0.0) : vec3(0.0, -normal.z, normal.y));
  vec3 bitangent = cross(normal, tangent);

  float alpha    = pc.roughness * pc.roughness;
  uint  nsamples = alpha > 0.0f ? 512u : 1u;

  uint state = uint(rnd_init(ivec3(normal * 1e4f)));

  // The integrals are additionally weighted by the cosine and normalized using the average cosine of
  // the importance sampled BRDF directions (as in the Unreal publication).
  float weight_sum = 0.0f;

  vec3  result       = vec3(0.0);
  float inv_nsamples = 1.0f / float(nsamples);
  for(uint i = 0u; i < nsamples; ++i)
  {
    // Importance sample BRDF.
    {
      float xi0 = (float(i) + 0.5f) * inv_nsamples;
      state     = rnd_next(state);
      float xi1 = rnd_val(state);

      vec3 h0 = alpha > 0.0f ? ggx_sample(vec2(xi0, xi1), alpha) : vec3(0.0f, 0.0f, 1.0f);
      vec3 h  = tangent * h0.x + bitangent * h0.y + normal * h0.z;

      vec3 direction = normalize(2.0 * dot(normal, h) * h - normal);

      float cos_theta = dot(normal, direction);
      if(cos_theta > 0.0)
      {
        vec2  uv = get_spherical_uv(direction);
        float w  = 1.0f;
        if(alpha > 0.0f)
        {
          float pdf_brdf_sqr = ggx_eval(alpha, h0.z) * 0.25f / dot(direction, h);
          pdf_brdf_sqr *= pdf_brdf_sqr;
          float pdf_env = texture(hdrTexture, uv).a;
          w             = pdf_brdf_sqr / (pdf_brdf_sqr + pdf_env * pdf_env);
        }
        result += w * texture(hdrTexture, uv).rgb * cos_theta;
        weight_sum += cos_theta;
      }
    }

    // Importance sample environment.
    if(alpha > 0.0f)
    {
      state     = rnd_next(state);
      float xi2 = rnd_val(state);
      state     = rnd_next(state);
      float xi3 = rnd_val(state);
      state     = rnd_next(state);
      float xi4 = rnd_val(state);

      Envmap_sample_value val;
      vec4                radPdf = environmentSample(hdrTexture, vec3(xi2, xi3, xi4), val.dir);
      val.pdf                    = radPdf.a;
      val.value                  = radPdf.rgb / val.pdf;


      vec3  h  = normalize(normal + val.dir);
      float nh = dot(h, normal);
      float kh = dot(val.dir, h);
      float nk = dot(val.dir, normal);
      if(kh > 0.0f && nh > 0.0f && nk > 0.0f)
      {
        float pdf_env_sqr = val.pdf * val.pdf;
        float pdf_brdf    = ggx_eval(alpha, nh) * 0.25f / kh;

        float w = pdf_env_sqr / (pdf_env_sqr + pdf_brdf * pdf_brdf);
        result += w * val.value * pdf_brdf * nk * nk;
      }
    }
  }

  vec4 resultColor = vec4(result / float(weight_sum), 1.0);
  imageStore(gOutColor, ivec2(gl_GlobalInvocationID.xy), resultColor);
}
