/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_image_load_formatted : enable


// clang-format off
layout(set = 0, binding = 0) uniform image2D g_color;
layout(set = 0, binding = 1) uniform image2D g_albedo;
layout(set = 0, binding = 2) uniform image2D g_normal;

layout(set = 0, binding = 3) buffer _buf0 { vec4 g_buffer0[]; };
layout(set = 0, binding = 4) buffer _buf1 { vec4 g_buffer1[]; };
layout(set = 0, binding = 5) buffer _buf2 { vec4 g_buffer2[]; };
  // clang-format on


#define GRID_SIZE 16
layout(local_size_x = GRID_SIZE, local_size_y = GRID_SIZE) in;


void main()
{
  ivec2 imgSize = imageSize(g_color);
  ivec2 coord   = ivec2(gl_GlobalInvocationID.xy);
  if(coord.x >= imgSize.x || coord.y >= imgSize.y)  // Check limits
    return;

  uint linear = coord.y * imgSize.x + coord.x;

  g_buffer0[linear] = imageLoad(g_color, coord);
  g_buffer1[linear] = imageLoad(g_albedo, coord);
  vec4 nrm          = imageLoad(g_normal, coord);
  nrm.xyz           = (nrm.xyz * 2.0) - 1.0;  // Converting to [-1..1]
  g_buffer2[linear] = nrm;
}
