/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#include "host_device.h"
#include "ray_common.glsl"
#include "common/shaders/sampling.glsl"
#include "compress.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT GbufferPayload payloadGbuf;

layout(set = 0, binding = eTlas)      uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage)  uniform image2D image;
layout(set = 0, binding = eOutAlbedo) uniform image2D gAlbedo;
layout(set = 0, binding = eOutNormal) uniform image2D gNormal;

layout(set = 1, binding = eFrameInfo) uniform FrameInfo_ { FrameInfo frameInfo; };
// clang-format on

layout(push_constant) uniform RtxPushConstant_
{
  RtxPushConstant pc;
};

vec4 gUnpackedAlbedo = vec4(0);
vec3 gUnpackedNormal = vec3(0);

//-----------------------------------------------------------------------
// Sampling the pixel
//-----------------------------------------------------------------------
vec3 samplePixel(inout uint seed)
{
  // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
  vec2 subpixel_jitter = pc.frame == 0 ? vec2(0.5f, 0.5f) : vec2(rand(seed), rand(seed));

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d           = inUV * 2.0 - 1.0;

  const vec4  origin    = frameInfo.viewInv * vec4(0.0, 0.0, 0.0, 1.0);
  const vec4  target    = frameInfo.projInv * vec4(d.x, d.y, 0.01, 1.0);
  const vec4  direction = frameInfo.viewInv * vec4(normalize(target.xyz), 0.0);
  const uint  rayFlags  = gl_RayFlagsCullBackFacingTrianglesEXT;
  const float tMin      = 0.001;
  const float tMax      = INFINITE;

  payload.contrib      = vec3(0.0, 0.0, 0.0);
  payload.weight       = vec3(1.0, 1.0, 1.0);
  payload.seed         = seed;
  payload.hitT         = INFINITE;
  payload.rayOrigin    = origin.xyz;
  payload.rayDirection = direction.xyz;

  vec3 weightAccum  = vec3(1.0, 1.0, 1.0);
  vec3 contribAccum = vec3(0.0, 0.0, 0.0);

  for(int depth = 0; depth < pc.maxDepth; depth++)
  {
    traceRayEXT(topLevelAS,            // acceleration structure
                rayFlags,              // rayFlags
                0xFF,                  // cullMask
                0,                     // sbtRecordOffset
                0,                     // sbtRecordStride
                0,                     // missIndex
                payload.rayOrigin,     // ray origin
                tMin,                  // ray min range
                payload.rayDirection,  // ray direction
                tMax,                  // ray max range
                0                      // payload (location = 0)
    );
    // Accumulating results
    contribAccum += payload.contrib * weightAccum;
    weightAccum *= payload.weight;

    // Stopping recursion
    if(payload.hitT == INFINITE)
      break;

    // Russian-Roulette
    float rrPcont = min(max(weightAccum.x, max(weightAccum.y, weightAccum.z)) + 0.001, 0.95);
    if(rand(payload.seed) >= rrPcont)
      break;  // paths with low throughput that won't contribute
    weightAccum /= rrPcont;
  }

  // Removing fireflies
  float lum = dot(contribAccum, vec3(0.212671f, 0.715160f, 0.072169f));
  if(lum > pc.maxLuminance)
  {
    contribAccum *= pc.maxLuminance / lum;
  }

  seed = payload.seed;
  return contribAccum;
}

//-----------------------------------------------------------------------
// Trace a single ray in the middle of the pixel to retrieve the
// Albedo and normal. Also, forcing all objects to be opaque
//-----------------------------------------------------------------------
void traceAlbedo()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f, 0.5f);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d           = inUV * 2.0 - 1.0;

  const vec4  origin    = frameInfo.viewInv * vec4(0.0, 0.0, 0.0, 1.0);
  const vec4  target    = frameInfo.projInv * vec4(d.x, d.y, 0.01, 1.0);
  const vec4  direction = frameInfo.viewInv * vec4(normalize(target.xyz), 0.0);
  const uint  rayFlags  = gl_RayFlagsOpaqueEXT;
  const float tMin      = 0.001;
  const float tMax      = INFINITE;

  payloadGbuf.packAlbedo = 0;
  payloadGbuf.packNormal = 0;

  traceRayEXT(topLevelAS,     // acceleration structure
              rayFlags,       // rayFlags
              0xFF,           // cullMask
              1,              // sbtRecordOffset --- Using the Gbuffer.rchit
              0,              // sbtRecordStride
              1,              // missIndex --- Using the Gbuffer.rmiss
              origin.xyz,     // ray origin
              tMin,           // ray min range
              direction.xyz,  // ray direction
              tMax,           // ray max range
              1               // payload --- Using the GbufferPayload
  );

  gUnpackedAlbedo = unpackUnorm4x8(payloadGbuf.packAlbedo);
  gUnpackedNormal = decompress_unit_vec(payloadGbuf.packNormal);
}


//-----------------------------------------------------------------------
//
//-----------------------------------------------------------------------
void main()
{
  // Initialize the random number
  uint seed = xxhash32(uvec3(gl_LaunchIDEXT.xy, pc.frame));

  // Sampling n times the pixel
  vec3 contribAccum = vec3(0.0, 0.0, 0.0);
  for(uint s = 0; s < pc.maxSamples; s++)
  {
    contribAccum += samplePixel(seed);
  }
  contribAccum /= pc.maxSamples;

  // Saving result
  if(pc.frame == 0)
  {
    // First frame, replace the value in the buffer
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(contribAccum, 1.f));

    // G-Buffers
    traceAlbedo();
    imageStore(gAlbedo, ivec2(gl_LaunchIDEXT.xy), gUnpackedAlbedo);
    gUnpackedNormal = (gUnpackedNormal * vec3(0.5)) + vec3(0.5);  // converting to [0..1]
    imageStore(gNormal, ivec2(gl_LaunchIDEXT.xy), vec4(gUnpackedNormal, 0));
  }
  else
  {  // Do accumulation over time
    float a         = 1.0f / float(pc.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, contribAccum, a), 1.f));
  }
}
