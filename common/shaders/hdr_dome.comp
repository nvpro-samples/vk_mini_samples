/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "host_device.h"

layout(local_size_x = GRID_SIZE, local_size_y = GRID_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) writeonly uniform image2D gOutHdr;
layout(set = 1, binding = eHdr) uniform sampler2D gInHdr;


layout(push_constant) uniform SkyDomePushConstant_
{
  HdrDomePushConstant pc;
};


const float ONE_OVER_PI = 0.3183099;

vec2 getSpericalUv(vec3 v)
{
  float gamma = asin(-v.y);
  float theta = atan(v.z, v.x);
  return vec2(theta * ONE_OVER_PI * 0.5, gamma * ONE_OVER_PI) + 0.5;
}

vec3 rotate(vec3 v, vec3 k, float theta)
{
  float cos_theta = cos(theta);
  float sin_theta = sin(theta);

  return (v * cos_theta) + (cross(k, v) * sin_theta) + (k * dot(k, v)) * (1 - cos_theta);
}

void main()
{
  const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(imageSize(gOutHdr));
  const vec2 d           = inUV * 2.0 - 1.0;
  vec3       direction   = vec3(pc.mvp * vec4(d.x, d.y, 1.0, 1.0));

  direction = rotate(direction, vec3(0,1,0), -pc.rotation);

  const vec2 uv    = getSpericalUv(normalize(direction.xyz));
  const vec3 color = texture(gInHdr, uv).rgb * pc.multColor.rgb;
  imageStore(gOutHdr, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0.0));
}
